#!/usr/bin/env python3
# -*- coding: utf8 -*-

"""
    openpush-client is a console client for Openpush API.

    openpush-client [--push-api=http://localhost:5000]
        --admin-name=foo --admin-password=bar
        user add name=some-username password=some-password

        --user-name=some-username --user-password=some-password
        client add name=my-phone

        --client-token=my-phone-token
        application add id=app-id'

        --token=routing-token
        message publish data="lorem ipsum"
"""

#TODO: accept json input (stdin) as alternative to command params
#TODO: use openapi spec to generate client dynamically

import sys
import argparse
import requests


ITEMS = ['user', 'client']
ENDPOINTS = [
    {
        'name': 'version',
    },
    {
        'name': 'user',
        'auth': {
            'mode': 'admin',
            'optional': True
        },
        'actions': ['add', 'list', 'get', 'del']
    },
    {
        'name': 'client',
        'auth': {
            'mode': 'basic',
            'optional': True
        },
        'actions': ['add', 'list', 'del']
    },
    {
        'name': 'application',
        'auth': {
            'mode': 'token'
        },
        'actions': ['add', 'list', 'del']
    },
]

# requests verbs matching commands
VERBS= {
    'add': 'post',
    'list': 'get',
    'get': 'get',
    'del': 'delete',
}

def api(item):
    def _call(args, remains):
        print(item, args, remains)
        uri  = f'{args.push_api}/{item}'

        headers = {}
        auth = None
        if hasattr(args, 'admin_username'):
            auth = (args.admin_username, args.admin_password)
        elif hasattr(args, 'auth_username'):
            auth = (args.auth_username, args.auth_password)
        elif hasattr(args, 'auth_token'):
            headers['X-Openpush-Key'] = args.auth_token
        payload = dict([param.split('=') for param in remains])
        action = getattr(args, 'action', 'list')
        verb = VERBS.get(action, 'head')

        #
        if action in ('get', 'del'):
            uri = uri + '/' + payload.get('id', 'none')
        print(verb, uri, auth, headers, payload)

        r = getattr(requests, verb)(uri, auth=auth, headers=headers, json=payload)
        print(r.status_code, r.text)

    return _call

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='openpush client')
    parser.add_argument('--push-api', type=str, dest='push_api',
        default='http://localhost:5000')
    subparsers = parser.add_subparsers(help='sub-commands help')

    for ep in ENDPOINTS:
        subparser = subparsers.add_parser(ep['name'])
        if 'auth' in ep:
            if ep['auth']['mode'] == 'admin':
                subparser.add_argument('--admin-username')
                subparser.add_argument('--admin-password')
            elif ep['auth']['mode'] == 'basic':
                subparser.add_argument('--auth-username')
                subparser.add_argument('--auth-password')
            elif ep['auth']['mode'] == 'token':
                subparser.add_argument('--auth-token')

        if 'actions' in ep:
            subparser.add_argument('action', type=str, choices=ep['actions'])
        subparser.set_defaults(func=api(ep['name']))

    args, remains = parser.parse_known_args()
    #print(args, remains)
    if not hasattr(args, 'func'):
        print('no command set. Exiting...'); sys.exit(1)
    args.func(args, remains)

